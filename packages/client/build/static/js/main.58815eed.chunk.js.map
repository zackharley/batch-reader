{"version":3,"sources":["components/Dashboard.js","components/Viewer.js","components/ViewerContainer.js","components/ReadingList.js","components/ReadingListContainer.js","components/ReadTogetherContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["Dashboard","props","useState","isFullScreen","setIsFullScreen","useEffect","screenfull","onchange","isFullscreen","fullScreenElement","className","onClick","exit","request","to","isEnabled","children","Viewer","article","isLoading","name","title","format","datePublished","author","href","url","target","rel","domain","isRead","data-tip","dangerouslySetInnerHTML","__html","content","ViewerContainer","setArticle","articleId","useParams","a","querystring","URLSearchParams","fetch","toString","response","json","fetchArticle","isReadingList","ReadingList","readingList","urlList","length","map","console","log","key","_id","ReadingListContainer","setIsLoading","setReadingList","articles","fetchReadingList","ReadTogetherContainer","setArticles","nextArticles","fetchArticles","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58815eed.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { RiFullscreenLine, RiFullscreenExitLine } from 'react-icons/ri';\nimport screenfull from 'screenfull';\nimport './Dashboard.css';\n\nfunction Dashboard(props) {\n  const [isFullScreen, setIsFullScreen] = useState();\n  useEffect(() => {\n    screenfull.onchange(() => {\n      setIsFullScreen(screenfull.isFullscreen);\n    });\n  });\n  const fullScreenElement = isFullScreen ? (\n    <RiFullscreenExitLine\n      className=\"icon\"\n      onClick={() => screenfull.exit()}\n    />\n  ) : (\n    <RiFullscreenLine\n      className=\"icon\"\n      onClick={() => screenfull.request()}\n    />\n  );\n  return (\n    <div>\n      <header className=\"header\">\n        <div>\n          <Link to=\"/\" className=\"logo\">\n            <span>Readr</span>\n          </Link>\n        </div>\n        <div>{screenfull.isEnabled ? fullScreenElement : ''}</div>\n      </header>\n      <div className=\"dashboard-content\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Spinner from 'react-spinkit';\nimport { format } from 'date-fns';\nimport './Viewer.css';\nimport {\n  MdCheckBox,\n  MdCheckBoxOutlineBlank,\n} from 'react-icons/md';\nimport ReactTooltip from 'react-tooltip';\n\nfunction Viewer(props) {\n  const { article, isLoading } = props;\n  if (isLoading || !article) {\n    return (\n      <div>\n        <Spinner name=\"three-bounce\" />\n      </div>\n    );\n  }\n  return (\n    <div className=\"viewer-container\">\n      <h1>{article.title}</h1>\n      <div className=\"viewer-subtitle-container\">\n        <div className=\"viewer-metadata-container\">\n          <p>{format(article.datePublished, 'MM/dd/yyyy')}</p>\n          {article.author ? (\n            <>\n              <span>|</span>\n              <p>{article.author}</p>\n            </>\n          ) : (\n            ''\n          )}\n          <span>|</span>\n          <a\n            href={props.url}\n            className=\"viewer-metadata-link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {article.domain}\n          </a>\n        </div>\n\n        <div>\n          {props.isRead ? (\n            <MdCheckBox\n              className=\"icon\"\n              data-tip=\"Mark this article as unread\"\n            />\n          ) : (\n            <MdCheckBoxOutlineBlank\n              className=\"icon\"\n              data-tip=\"Mark this article as read\"\n            />\n          )}\n        </div>\n        <ReactTooltip />\n      </div>\n      <div dangerouslySetInnerHTML={{ __html: article.content }} />\n    </div>\n  );\n}\n\nexport default Viewer;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Viewer from './Viewer';\n\nfunction ViewerContainer() {\n  const [article, setArticle] = useState(null);\n  const { articleId } = useParams();\n  useEffect(() => {\n    async function fetchArticle() {\n      const querystring = new URLSearchParams({ articleId });\n      const response = await fetch(\n        `/api/get-article?${querystring.toString()}`\n      );\n      const { article } = await response.json();\n      setArticle(article);\n    }\n    fetchArticle();\n  }, [articleId]);\n  return <Viewer article={article} isReadingList={true} />;\n}\n\nexport default ViewerContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './ReadingList.css';\n\nfunction ReadingList(props) {\n  const readingList = props.readingList;\n  const hasUrlList = readingList && readingList.length > 0;\n  const urlList = hasUrlList ? (\n    <ul>\n      {readingList.map(\n        (article) =>\n          console.log(article) || (\n            <li key={article.url}>\n              <Link to={`/read/${article._id}`}>{article.title}</Link>\n            </li>\n          )\n      )}\n    </ul>\n  ) : (\n    <p>Add some things to read!</p>\n  );\n  return (\n    <div className=\"reading-list-container\">\n      <div className=\"reading-list-header-container\">\n        <h1 className=\"reading-list-title\">Your Reading List</h1>\n        <div className=\"reading-list-divider\" />\n        <Link className=\"reading-list-read-together\" to=\"/read/together\">\n          Read together\n        </Link>\n      </div>\n      <section>{urlList}</section>\n    </div>\n  );\n}\n\nexport default ReadingList;\n","import React, { useEffect, useState } from 'react';\nimport ReadingList from './ReadingList';\n\nfunction ReadingListContainer() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [readingList, setReadingList] = useState([]);\n  useEffect(() => {\n    async function fetchReadingList() {\n      setIsLoading(true);\n      const response = await fetch('/api/list-articles');\n      const { articles } = await response.json();\n      setReadingList(articles);\n      setIsLoading(false);\n    }\n    fetchReadingList();\n  }, []);\n  return <ReadingList readingList={readingList} isLoading={isLoading} />;\n}\n\nexport default ReadingListContainer;\n","import React, { useEffect, useState } from 'react';\nimport Viewer from './Viewer';\n\nfunction ReadTogetherContainer() {\n  const [articles, setArticles] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    async function fetchArticles() {\n      setIsLoading(true);\n      const response = await fetch('/api/list-articles');\n      const { articles: nextArticles } = await response.json();\n      setArticles(nextArticles);\n      setIsLoading(false);\n    }\n    fetchArticles();\n  }, []);\n  return (\n    <div>\n      {articles.map((article) => (\n        <Viewer key={article._id} article={article} isLoading={isLoading} />\n      ))}\n    </div>\n  );\n}\n\nexport default ReadTogetherContainer;\n","import React from 'react';\nimport Dashboard from './Dashboard';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ViewerContainer from './ViewerContainer';\nimport ReadingListContainer from './ReadingListContainer';\nimport ReadTogetherContainer from './ReadTogetherContainer';\n\nfunction App() {\n  return (\n    <Router>\n      <main className=\"app-container\">\n        <Dashboard>\n          <Switch>\n            <Router path=\"/read/together\" >\n              <ReadTogetherContainer />\n            </Router>\n            <Route path=\"/read/:articleId\">\n              <ViewerContainer />\n            </Route>\n            <Route path=\"/\">\n              <ReadingListContainer />\n            </Route>\n          </Switch>\n        </Dashboard>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Dashboard is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}